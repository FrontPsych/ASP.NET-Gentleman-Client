@using HtmlHelpers
@using Microsoft.AspNet.Identity
@using Microsoft.AspNet.Identity.Owin
@model Web.ViewModels.GameCreateViewModel

@{
    ViewBag.Title = Resources.Common.NewGame;
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}

@section AdminStyles {
    @*<link href="~/Scripts/AdminTheme/plugins/select2/select2.css" rel="stylesheet" />*@
    <style>
         .square {
            width: 40px !important;
            height: 40px !important;
        }
         .square.input-validation-error {
              border-color: #a94442;
              -webkit-box-shadow: inset 0 1px 1px rgba(0, 0, 0, .075);
                      box-shadow: inset 0 1px 1px rgba(0, 0, 0, .075);
            }
           .square.input-validation-error.form-control:focus {
              border-color: #843534;
              -webkit-box-shadow: inset 0 1px 1px rgba(0, 0, 0, .075), 0 0 6px #ce8483;
                      box-shadow: inset 0 1px 1px rgba(0, 0, 0, .075), 0 0 6px #ce8483;
            }
           .row-error {
                background: lightcoral!important;
           }

    </style>
}

<div class="row">

    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()

        <div class="col-md-12">
            <div class="box box-primary">
                <div class="box-header">
                    <h3 class="box-title">@Resources.Common.GameDetails</h3>
                </div>
                <div class="box-body">
                    @Html.Partial("_CreateGamePartial", Model)
                </div><!-- /.box-body -->
            </div><!-- /.box -->
        </div><!-- /.col (left) -->
    }

            @*<div>
                @Html.ActionLink("Back to List", "Index")
            </div>*@
</div>
<div class="row">
    @if (Model.GameTime)
    {
        //"Create", "Games", FormMethod.Post, new { Class = "form inline" })
        using (Html.BeginForm())
        {
            @Html.AntiForgeryToken()

            <div class="col-xs-12">
                @Html.Partial("_CreateUserGameRowsPartial", Model)
            </div>
        }
    }
</div>



@section AdminScripts {
@if (Model.GameTime)
{
    <script>
        @if (@Model.GameRowTypesForGivenGame != null)
        {
            <text>
        var gameData = {
            'currentgamerow': 0,
            'gamerows': [
                @foreach (var gameRowType in @Model.GameRowTypesForGivenGame)
                {
                    <text>
                { 'id': "@gameRowType.GameRowTypeId", 'desc': "@gameRowType.Description" },
                </text>
                }
            ],
            'users': [
                { 'id': "@User.Identity.GetUserId()", 'name': "@User.Identity.GetUserName()" }
            ],
            'getNextGameRow': function() {
                this.currentgamerow++;
                if (typeof this.gamerows[this.currentgamerow] === 'undefined') {
                    return false;
                } else {
                    return this.gamerows[this.currentgamerow];
                }

            },
            'isUniqUser': function(name) {
                var result = $.grep(this.users, function(e){ return e.name == name; });
                return (result.length == 0);
            }

        };
        </text>
        }


        //ToDo: into single call
        $('#add-person').on('click', function() {
            console.log('#add-person was clicked');
            var newusername = $('#name_box').val();
            if (newusername) {
                if (gameData.isUniqUser(newusername)) {
                    $.ajax({
                        url: '@Url.Action("AddUser")',
                        type: "POST",
                        data: { username: newusername },
                        success: function(data) {
                            console.log(newusername + " id: " + data.id);
                            gameData.users.push({ 'id': data.id, 'name': newusername });

                            jQuery.get('/Games/AddUserGameRow?userid=' + data.id).done(function(html) {
                                $('#mtable thead tr>th:last').before("<th>" + newusername + "</th>");
                                $('#mtable tbody tr>td:last').before("<td>" + html + "</td>");
                                $('#mtable tfoot tr#score-name-row   >td:last').before("<td>" + newusername + "</td>");
                                $('#mtable tfoot tr#score-points-row >td:last').before("<td id='score-points-userid-"+data.id+"'>0</td>");
                                $('#mtable tfoot tr#score-place-row  >td:last').before("<td id='score-place-userid-"+data.id+"'>1</td>");
                                $("#mtable tbody tr td").updateValidation();
                            });
                        }
                    });
                    console.log(gameData);
                    $('#name_box').val("");
                } else {
                    alert('@Resources.Common.ErrorUsersExists');
                }
            }
        });

        //function to update form fields validating after adding fileds with js
        //source http://stackoverflow.com/questions/4406291/jquery-validate-unobtrusive-not-working-with-dynamic-injected-elements
        (function ($) {
            $.fn.updateValidation = function () {
                var $this = $(this);
                var form = $this.closest("form")
                    .removeData("validator")
                    .removeData("unobtrusiveValidation");
                $.validator.unobtrusive.parse(form);
                return $this;
            };
        })(jQuery);


        function isValidRow(tr_row) {
            sum = 0;
            tr_row.find('.start_bet').each(function() {
                el = $(this);
                val = el.val();
                if (val == "" || isNaN(val) || val<0) {
                    val = 0;
                    el.val(val);
                }
                sum+=parseInt(val);
                console.log($(this).val());
            });
            if (sum == tr_row.find('td:first').html()) {
                return false;
            }

            return true;
        }

        $('.save-row').on('click', function() {
            var tr_element = $(this).closest('tr');
            tr_element.removeClass('row-error');
            if (isValidRow(tr_element)) {
                console.log(tr_element);
                var obj = {
                    GameRow : {
                        'gamerowid': tr_element.data('gamerowid'),
                        'gameid': @Model.Game.GameId,
                        'gamerowtypeid': tr_element.data('gamerowtypeid')
                    },
                    'UserGameRows': []
                }

                tr_element.find('td div').each(function() {
                    var el = $(this);
                    userid = el.data('userid');
                    if (userid > 0) {
                        var start_bet = el.find('.start_bet').first().val();
                        var end_bet = el.find('.end_bet').first().val();
                        obj.UserGameRows.push({ 'userintid': userid, 'startbet': start_bet, 'endbet': end_bet });
                    }
                });
                console.log(obj);

                $.ajax({
                    url: '@Url.Action("AddUpdateGameRow")',
                    type: "POST",
                    data: obj,
                    success: function(data) {
                        console.log(data);
                        console.log("Newly added game row id: " + data.GameRowId);
                        if (tr_element.data('gamerowid') == 0) {
                            var last_row = $('#mtable tbody>tr:last');
                            if (last_row.data('gamerowid') == 0) {
                                var gamerow = gameData.getNextGameRow();
                                row = $('#mtable tbody>tr:last').data('gamerowid',data.GameRowId);
                                if (gamerow) {
                                    row = $('#mtable tbody>tr:last').clone(true)
                                    row.find('.start_bet').val('0')
                                    row.find('.end_bet').val('');
                                    row.data('gamerowtypeid', gamerow.id);
                                    row.find('td:first').html(gamerow.desc);
                                    row.data('gamerowid', '0')
                                    row.insertAfter('#mtable tbody>tr:last')
                                    console.log('LISAME UUE REA: ')
                                    console.log(row)
                                    console.log(row.data('gamerowtypeid'))
                                    console.log(row.data('gamerowid'))
                                }
                            }  
                        } // if (tr_element.data('gamerowid') == 0) { if (tr_element.data('gamerowid') == 0) {
                        jQuery.get('@Url.Action("GetGameResults", "Games", new { gameId = Model.Game.GameId })' ).done(function(array) {
                            console.log("SKOORI ARR: ");
                            jQuery.each(array, function() {
                                jQuery('#score-place-userid-'+this.UserIntId).html(this.Position);
                                jQuery('#score-points-userid-'+this.UserIntId).html(this.ScorePoints);
                            });
                            console.log(array);
                        });
                    } //end success
                });//end ajax call
            }  else {
                tr_element.addClass('row-error');
            }

           


        });


        $('#name_box').keypress(function(event) {
            if (event.keyCode == 13) {
                $('#add-person').click();
                event.preventDefault();
            }
        });

        $("#dropdown").prop("disabled", true);
        $("#new-game-btn").hide();
        $('#Game_GameName').attr('readonly', true);
        $('#Game_GameName').addClass('input-disabled');
        $('#NumberOfPlayers').attr('readonly', true);
        $('#NumberOfPlayers').addClass('input-disabled');
    </script>
}

}